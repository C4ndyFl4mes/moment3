{"mappings":"C,A,WCAA,IAAM,EAAiB,SAAS,cAAc,CAAC,cA0C/C,eAAe,EAAY,EAAO,CAAC,EAC/B,GAAI,CACA,IAAM,EAAO,MAAM,MAAM,CAAC,wCAAwC,EAAE,EAAK,SAAS,CAAC,EAC7E,EAAO,MAAM,EAAK,IAAI,GAC5B,EAAkB,EAAM,EAAK,IAAI,CACrC,CAAE,MAAO,EAAO,CACZ,QAAQ,KAAK,CAAC,EAClB,CACJ,CAKA,eAAe,EAAkB,CAAI,CAAE,CAAS,EAC5C,GAAI,aAAa,OAAO,CAAC,qBAAsB,CAC3C,IAAM,EAAe,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,sBACrD,EAAa,IAAI,CAAC,CAAE,KAAM,EAAM,KAAM,CAAU,GAChD,aAAa,OAAO,CAAC,oBAAqB,KAAK,SAAS,CAAC,GAC7D,MACI,aAAa,OAAO,CAAC,oBAAqB,KAAK,SAAS,CAAC,CAAC,CAAE,KAAM,EAAM,KAAM,CAAU,EAAE,EAElG,CA5DA,OAAO,MAAM,CAAG,UACZ,MAAM,IAEN,AAIJ,SAAoB,EAAO,CAAC,EACxB,GAAI,aAAa,OAAO,CAAC,qBAIrB,CAAA,IAAK,IAAM,KAFU,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,sBAGjD,GAAI,EAAK,IAAI,GAAK,EAAM,KAOZ,EAAA,EANG,EAAK,IAAI,CAQ5B,EAAe,SAAS,CAAG,GAC3B,EAAK,OAAO,CAAC,AAAA,IACT,EAAe,SAAS,EACpB,CAAC;A;A;AAG2B,4CAAA,EAAE,EAAM,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;AACpC,sCAAA,EAAE,EAAM,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC;A;A;AAG9C,qBAAA,CAAC,AACd,GAlBQ,KACJ,CAAA,CAmBZ,GA/BA,C","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["(function () {\nvar $5a3fc3e2587399e4$exports = {};\nconst $5a3fc3e2587399e4$var$animeListTBODY = document.getElementById(\"anime-list\");\n// När sidan laddas in hämtas och renderas första sidan av anime listan.\nwindow.onload = async ()=>{\n    await $5a3fc3e2587399e4$var$getTopAnime();\n    $5a3fc3e2587399e4$var$renderList();\n};\n// Renderar en sida beroende på vilken sida det är, standard är första sidan.\nfunction $5a3fc3e2587399e4$var$renderList(page = 1) {\n    if (localStorage.getItem(\"animePagesofLists\")) {\n        // Hämtar listan från localStorage:\n        const pagesofLists = JSON.parse(localStorage.getItem(\"animePagesofLists\"));\n        // Loopar igenom sidorna tills rätt sida är funnen, då anropas listOnPage med sidans lista som argument, därefter stoppas loopen.\n        for (const list of pagesofLists)if (list.page === page) {\n            listOnPage(list.list);\n            break;\n        }\n    }\n    // Renderar en lista.\n    function listOnPage(list) {\n        // Använder innerHTML för att det ska bli så smidigt som möjligt.\n        $5a3fc3e2587399e4$var$animeListTBODY.innerHTML = \"\";\n        list.forEach((anime)=>{\n            $5a3fc3e2587399e4$var$animeListTBODY.innerHTML += `<tr>\n                    <td>\n                        <picture class=poster>\n                            <source srcset=\"${anime.images.webp.image_url}\" type=\"image/webp\">\n                            <img src=\"${anime.images.jpg.image_url}\" alt=\"\" loading=\"lazy\" class=poster>\n                        </picture>\n                    </td>\n                </tr>`;\n        });\n    }\n}\n// Hämtar top anime från Jikan API, argumentet (page) i parametern ser till en och samma anime inte hämtas mer än en gång.\n// Varje sida innehåller max 25 anime då det är API:ns max gräns för varje request.\nasync function $5a3fc3e2587399e4$var$getTopAnime(page = 1) {\n    try {\n        const resp = await fetch(`https://api.jikan.moe/v4/top/anime?page=${page}&limit=25`);\n        const data = await resp.json();\n        $5a3fc3e2587399e4$var$animePagesofLists(page, data.data); // Anropar för att ordna en array som ska lagras i localStorage.\n    } catch (error) {\n        console.error(error);\n    }\n}\n// Skapar objekt med två egenskaper:\n// page är som ett id som håller reda på vilken lista som den innehåller. Detta är för att vi endast hämtar en liten del av en gigantisk lista av anime.\n// list är den lista som tillhör page, i detta faller är det 25 list items.\nasync function $5a3fc3e2587399e4$var$animePagesofLists(page, animeList) {\n    if (localStorage.getItem(\"animePagesofLists\")) {\n        const pagesofLists = JSON.parse(localStorage.getItem(\"animePagesofLists\"));\n        pagesofLists.push({\n            page: page,\n            list: animeList\n        });\n        localStorage.setItem(\"animePagesofLists\", JSON.stringify(pagesofLists));\n    } else localStorage.setItem(\"animePagesofLists\", JSON.stringify([\n        {\n            page: page,\n            list: animeList\n        }\n    ]));\n}\n\n})();\n//# sourceMappingURL=index.897d26d8.js.map\n","const animeListTBODY = document.getElementById(\"anime-list\");\r\n\r\n// När sidan laddas in hämtas och renderas första sidan av anime listan.\r\nwindow.onload = async () => {\r\n    await getTopAnime();\r\n\r\n    renderList();\r\n}\r\n\r\n// Renderar en sida beroende på vilken sida det är, standard är första sidan.\r\nfunction renderList(page = 1) {\r\n    if (localStorage.getItem(\"animePagesofLists\")) {\r\n        // Hämtar listan från localStorage:\r\n        const pagesofLists = JSON.parse(localStorage.getItem(\"animePagesofLists\"));\r\n        // Loopar igenom sidorna tills rätt sida är funnen, då anropas listOnPage med sidans lista som argument, därefter stoppas loopen.\r\n        for (const list of pagesofLists) {\r\n            if (list.page === page) {\r\n                listOnPage(list.list);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    // Renderar en lista.\r\n    function listOnPage(list) {\r\n        // Använder innerHTML för att det ska bli så smidigt som möjligt.\r\n        animeListTBODY.innerHTML = \"\";\r\n        list.forEach(anime => {\r\n            animeListTBODY.innerHTML +=\r\n                `<tr>\r\n                    <td>\r\n                        <picture class=poster>\r\n                            <source srcset=\"${anime.images.webp.image_url}\" type=\"image/webp\">\r\n                            <img src=\"${anime.images.jpg.image_url}\" alt=\"\" loading=\"lazy\" class=poster>\r\n                        </picture>\r\n                    </td>\r\n                </tr>`;\r\n        });\r\n    }\r\n}\r\n\r\n// Hämtar top anime från Jikan API, argumentet (page) i parametern ser till en och samma anime inte hämtas mer än en gång.\r\n// Varje sida innehåller max 25 anime då det är API:ns max gräns för varje request.\r\nasync function getTopAnime(page = 1) {\r\n    try {\r\n        const resp = await fetch(`https://api.jikan.moe/v4/top/anime?page=${page}&limit=25`);\r\n        const data = await resp.json();\r\n        animePagesofLists(page, data.data); // Anropar för att ordna en array som ska lagras i localStorage.\r\n    } catch (error) {\r\n        console.error(error);\r\n    }\r\n}\r\n\r\n// Skapar objekt med två egenskaper:\r\n// page är som ett id som håller reda på vilken lista som den innehåller. Detta är för att vi endast hämtar en liten del av en gigantisk lista av anime.\r\n// list är den lista som tillhör page, i detta faller är det 25 list items.\r\nasync function animePagesofLists(page, animeList) {\r\n    if (localStorage.getItem(\"animePagesofLists\")) {\r\n        const pagesofLists = JSON.parse(localStorage.getItem(\"animePagesofLists\"));\r\n        pagesofLists.push({ page: page, list: animeList });\r\n        localStorage.setItem(\"animePagesofLists\", JSON.stringify(pagesofLists));\r\n    } else {\r\n        localStorage.setItem(\"animePagesofLists\", JSON.stringify([{ page: page, list: animeList }]));\r\n    }\r\n}\r\n\r\n"],"names":["$5a3fc3e2587399e4$var$animeListTBODY","document","getElementById","$5a3fc3e2587399e4$var$getTopAnime","page","resp","fetch","data","json","$5a3fc3e2587399e4$var$animePagesofLists","error","console","animeList","localStorage","getItem","pagesofLists","JSON","parse","push","list","setItem","stringify","window","onload","$5a3fc3e2587399e4$var$renderList","innerHTML","forEach","anime","images","webp","image_url","jpg"],"version":3,"file":"index.897d26d8.js.map"}